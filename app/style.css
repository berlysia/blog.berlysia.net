@tailwind base;

@tailwind components;

@tailwind utilities;

:root {
  --marker-thickness: 0.5em;
}

html {
  min-height: 100vh;
  overflow-y: scroll;

  font-weight: 400;
  font-family: "Helvetica Neue", "Helvetica", "Hiragino Kaku Gothic ProN",
    "Yu Gothic Medium", "Ê∏∏„Ç¥„Ç∑„ÉÉ„ÇØ Medium", YuGothic, "Ê∏∏„Ç¥„Ç∑„ÉÉ„ÇØ‰Ωì",
    "Zen Kaku Gothic New", "Noto Sans JP", Meiryo, sans-serif;
  color: #233;

  scroll-padding-top: 48px;
  counter-reset: h1;

  @apply tw-text-base;
}

html:has(.vertical) {
  @media (640px <= width) and (600px <= height) {
    @apply tw-overflow-y-visible;
  }
  @media (width < 640px), (height < 600px) {
    @apply tw-overflow-y-hidden;
  }

  min-height: 100svh;
  height: 100%;
}

body {
  min-height: 100vh;
}

body:has(.vertical) {
  min-height: 100svh;
  height: 100%;
}

.vertical {
  /*
  „Åì„Çå„Çí„Å§„Åë„Å™„ÅÑ„Å®„ÄÅSafari„ÅßÊ®™„Çπ„ÇØ„É≠„Éº„É´„Åå„Åä„Åç„Å¶„Åó„Åæ„ÅÜ
  „Éö„Éº„Ç∏ÂÖ®‰Ωì„ÅÆwidth„ÅåÊú¨ÊñáÈÉ®ÂàÜ„ÇíÊ®™„Å´‰º∏„Å∞„Åó„Åü„Å®„Åç„Å®Âêå„Åò„Å†„Åë„ÅÆÂπÖ„ÇíÊåÅ„Å£„Å¶„Åó„Åæ„ÅÜ
  hidden„Åß„ÅØ„Çπ„ÇØ„É≠„Éº„É´„Ç≥„É≥„ÉÜ„Éä„Éº„Å´„Å™„Å£„Å¶„Åó„Åæ„ÅÑ„ÄÅ„Éò„ÉÉ„ÉÄ„Éº„ÅÆsticky„ÅåÂäπ„Åã„Å™„Åè„Å™„Çã
  */
  overflow-x: clip;
  text-underline-position: under left;
}

aside {
  @apply tw-text-sm tw-text-gray-500 tw-mb-2;
}

hr.slash {
  block-size: 8px;
  --color: rgb(249 168 212);
  color: --color;
  background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="3px" height="3px" viewBox="0 0 3 3" fill="rgb(249 168 212)"><polygon points="0,0.5 0,1.5 1.5,3 2.5,3"/><polygon points="2.5,0 1.5,0 3,1.5 3,0.5"/></svg>');
  background-size: 3px 3px;
  inline-size: 65%;
}

/* .vertical„ÇØ„É©„Çπ„ÅåÁ•ñÂÖà„Å´„Å§„ÅÑ„Å¶„ÅÑ„Çã„Å®„Åç„Å†„ÅëË°®Á§∫„Åô„Çã */
.vertical-only {
  display: none;
  .vertical & {
    display: revert;
  }
}

.vertical-tooltip {
  /* position: relative;
  &::after {
    text-indent: initial;
    font-style: initial;
    font-weight: initial;
    content: "„Åì„ÅÆË¶ÅÁ¥†„ÅØÁ∏¶Êõ∏„ÅçÁî®„ÅÆCSS„ÇíÂøÖË¶Å„Å®„Åó„Å¶„ÅÑ„Åæ„Åô";
    position: absolute;

    top: -40px;
    left: 100%;
    margin-left: 15px;
    height: 240px;
    padding: 10px;
    border-radius: 16px;
    background: #222;
    color: #eee;

    display: none;
  }
  &:hover::after {
    display: block;
  } */
}

.toc {
  border: 1px solid rgb(249 168 212);
  border-radius: 1rem;
  padding: 1rem;

  ol {
    counter-reset: toc;
    padding-inline-start: 1.2rem;

    .vertical & {
      background: linear-gradient(
        to bottom,
        transparent 0.6rem,
        rgb(249 168 212) 0.6rem,
        transparent 1rem 100%
      );
    }
    .horizontal & {
      background: linear-gradient(
        to right,
        transparent 0.6rem,
        rgb(249 168 212) 0.6rem,
        transparent 1rem 100%
      );
    }

    > li {
      display: block flow;
      list-style-type: none;
      list-style-position: inside;

      &::before {
        counter-increment: toc;
        content: counters(toc, ".") " ";
      }
    }
  }

  .toc-level {
    /* border-block-end: */
  }
}

.main-text-section {
  counter-reset: h2 h3 h4 h5 h6;

  h1 {
    @apply tw-text-4xl tw-border-be tw-border-is-2 tw-border-keyColor-200 tw-mbs-6 tw-mbe-2;
    counter-reset: h2 h3 h4 h5 h6;
    counter-increment: h1;
    margin-block-start: 4rem;

    > a::before {
      content: counter(h1) ". ";
    }
  }

  h2 {
    @apply tw-text-3xl tw-border-be tw-border-is tw-border-keyColor-200 tw-mbs-4 tw-mbe-2;
    counter-reset: h3 h4 h5 h6;
    counter-increment: h2;
    margin-block-start: 2rem;

    > a::before {
      content: counter(h1) "." counter(h2) ". ";
    }
  }

  h3 {
    @apply tw-text-2xl tw-border-be tw-border-keyColor-200 tw-mbs-3 tw-mbe-2;
    counter-reset: h4 h5 h6;
    counter-increment: h3;

    > a::before {
      content: counter(h1) "." counter(h2) "." counter(h3) ". ";
    }
  }

  h4 {
    @apply tw-text-xl tw-mbs-3 tw-mbe-2 tw-text-gray-800;
    counter-reset: h5 h6;
    counter-increment: h4;

    > a::before {
      content: counter(h1) "." counter(h2) "." counter(h3) "." counter(h4) ". ";
    }
  }

  h5 {
    @apply tw-text-lg tw-mbs-2 tw-mbe-2 tw-text-gray-800;
    counter-reset: h6;
    counter-increment: h5;

    > a::before {
      content: counter(h1) "." counter(h2) "." counter(h3) "." counter(h4) "."
        counter(h5) ". ";
    }
  }

  h6 {
    @apply tw-text-lg tw-mbs-1 tw-mbe-1 tw-text-gray-800;
    counter-increment: h6;

    > a::before {
      content: counter(h1) "." counter(h2) "." counter(h3) "." counter(h4) "."
        counter(h5) "." counter(h6) ". ";
    }
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    break-after: avoid;

    > a {
      &:any-link {
        color: currentColor;
        text-decoration: none;
      }

      &:visited {
        color: currentColor;
      }

      &,
      &:visited {
        &:active,
        &:hover {
          transition:
            color 0.2s,
            text-decoration 0.2s;
          @apply tw-text-keyColor-600;
        }
      }
    }

    > a:hover::after {
      @apply tw-text-base;
      content: " üîó";
    }
  }

  blockquote {
    @apply tw-plb-2 tw-pis-4 tw-mlb-2 tw-border-is-8 tw-border-be tw-border-keyColor-300 tw-bg-keyColor-50 tw-text-gray-600;
  }

  strong {
    text-decoration: underline rgb(254 202 202) /* bg-red-200 */ var(--marker-thickness);
    text-underline-offset: calc(-1 * var(--marker-thickness));
  }

  em {
    text-decoration: underline rgb(186 230 253) /* bg-sky-200 */ var(--marker-thickness);
    text-underline-offset: calc(-1 * var(--marker-thickness));
  }

  p {
    /* font-size„Å®indent„Åå‰∏ÄËá¥„Åó„Å¶„ÅÑ„Å™„ÅÑ„Å®Á¶ÅÂâáÂá¶ÁêÜ„Åå‰π±„Çå„Çã„Çà„ÅÜ„Å´Ë¶ã„Åà„Çã */
    @apply tw-mlb-4 tw-indent-[1em] tw-text-lg tw-leading-8;
    text-wrap: pretty;
  }

  td,
  th {
    @apply tw-border tw-border-collapse tw-border-gray-400;
  }

  a {
    &:any-link {
      @apply tw-text-keyColor-600 tw-underline;
    }

    &:visited {
      @apply tw-text-purple-800;
    }

    &,
    &:visited {
      &:active,
      &:hover {
        transition:
          color 0.2s,
          text-decoration 0.2s;
        @apply tw-text-keyColor-600;
      }
    }
  }

  pre:has(code) {
    @apply tw-writing-horizontal-tb tw-relative tw-flex tw-flex-col tw-justify-center tw-items-center;
    .vertical & {
      @apply tw-h-full;

      @media (640px <= width) and (600px <= height) {
        :not(:where(figure)) & {
          width: min(calc(100% - 32px), 1024px);
        }
        break-before: always;
        break-before: column;
        break-after: always;
        break-after: column;
        break-inside: avoid;
      }
    }

    > code {
      overflow-x: auto;

      .horizontal :not(:where(figure)) & {
        width: fit-content;
        max-width: min(max(calc(100% - 4rem), 85vw), calc(1024px - 4rem));
      }

      .vertical & {
        @media (640px <= width) and (600px <= height) {
          width: calc(100% - 4rem);
          @apply tw-max-h-[50vh] tw-max-h-[50svh];
        }
        @media (width < 640px), (height < 600px) {
          @apply tw-w-[90vw] tw-max-w-[90vw];
        }
      }
    }
  }

  ul > li {
    list-style: disc;
    list-style-position: inside;
  }

  ol > li {
    list-style: decimal;
    list-style-position: inside;
  }

  li {
    @apply tw-text-lg tw-leading-8;
  }

  figure {
    @apply tw-writing-horizontal-tb tw-relative tw-flex tw-flex-col;
    place-items: center;
    place-content: center;

    .vertical & {
      @apply tw-h-full;

      @media (640px <= width) and (600px <= height) {
        &.full-width {
          width: min(calc(100vw - 32px), 1024px);
          min-width: min(calc(100vw - 32px), 1024px);
          break-before: always;
          break-before: column;
          break-after: always;
          break-after: column;
          break-inside: avoid;
        }
        &:not(.full-width) {
          width: min(calc(100vw - 32px), 600px);
          min-width: min(calc(100vw - 32px), 600px);
        }
      }
    }

    > *:not(figcaption, dialog) {
      .horizontal & {
        width: fit-content;
        max-width: min(max(calc(100% - 4rem), 85vw), calc(1024px - 4rem));
      }

      .vertical & {
        @media (640px <= width) and (600px <= height) {
          width: calc(100% - 4rem);
          @apply tw-max-h-[50vh] tw-max-h-[50svh];
        }
        @media (width < 640px) {
          @apply tw-w-[90vw] tw-max-w-[90vw] tw-max-h-[90vh];
        }
        @media (height < 600px) {
          max-width: 480px;
          max-height: calc(100% - 2rem);
        }

        > * {
          max-width: 100%;
          max-height: 100%;
        }
      }
    }

    figcaption {
      @apply tw-text-center tw-text-sm tw-text-gray-500 tw-m-2;
    }
  }

  hr {
    block-size: 4px;
    --color: rgb(249 168 212);
    color: --color;
    background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="3px" height="3px" viewBox="0 0 3 3" fill="rgb(249 168 212)"><polygon points="0,0.5 0,1.5 1.5,3 2.5,3"/><polygon points="2.5,0 1.5,0 3,1.5 3,0.5"/></svg>');
    background-size: 3px 3px;
    inline-size: 65%;
    margin-inline: auto;
  }

  .embeddedLinkScope {
    break-inside: avoid;

    /* Êâì„Å°Ê∂à„Åó„Åü„ÅÑ„ÇÇ„ÅÆ„Å†„Åë„Åì„Åì„Å´ÂÆöÁæ© */
    h3 {
      @apply tw-text-lg tw-mlb-2;
    }
    p {
      @apply tw-text-base tw-mlb-2;
    }

    &:any-link {
      color: #233;
      text-decoration: none;
    }

    &:visited {
      color: #233;
    }

    &,
    &:visited {
      &:active,
      &:hover {
        transition:
          color 0.2s,
          text-decoration 0.2s;
        @apply tw-text-keyColor-600;
      }
    }
  }
}


.articleContentWrapper {
  overflow-wrap: anywhere;
  line-break: strict;
  text-wrap: pretty;

  .horizontal & {
    @apply tw-pt-2 tw-px-4;
  }

  .vertical & {
    @media (640px <= width) and (600px <= height) {
      @apply tw-py-4 tw-mx-auto tw-writing-vertical-rl tw-w-full tw-overflow-x-visible tw-h-max tw-relative tw-box-content;
      @apply tw-column-rule-color-keyColor-200 tw-gap-8;
      max-width: calc(100vw - 32px);

      /* ArticleSentinel„ÅÆÂá¶ÁêÜ„Å®ÂØæÂøú„Åó„Å¶„ÅÑ„Çã */
      columns: 50vh; /* fallback */
      columns: 50svh;
      column-fill: auto;
      column-rule-width: 1px;
      column-rule-style: solid;

      orphans: 4;
      widows: 4;
    }
    @media (width < 640px), (height < 600px) {
      @apply tw-py-4 tw-px-2;
      @apply tw-writing-vertical-rl tw-w-[100vw] tw-overflow-x-scroll tw-h-full tw-line-break-strict;
    }
  }
}

.contentAreaRestricter {
  @apply tw-max-w-screen-lg;
  .vertical & {
    @media (width < 640px), (height < 600px) {
      max-width: unset;
    }
  }
}

.articleWrapper {
  @apply tw-w-full tw-flex tw-justify-center;

  :where(.vertical) & {
    font-weight: 400;
    font-family: "Hiragino Kaku Gothic ProN", "Yu Gothic Medium",
      "Ê∏∏„Ç¥„Ç∑„ÉÉ„ÇØ Medium", YuGothic, "Ê∏∏„Ç¥„Ç∑„ÉÉ„ÇØ‰Ωì", "Zen Kaku Gothic New",
      "Noto Sans JP", Meiryo, sans-serif;

    @media (640px <= width) and (600px <= height) {
      @apply tw-h-auto tw-w-full tw-max-w-full tw-relative tw-box-content;
    }
    @media (width < 640px), (height < 600px) {
      height: calc(100vh - 2.5rem);
      height: calc(100svh - 2.5rem);
      overflow-x: auto;
    }
  }
}

@media (width < 640px), (height < 600px) {
  .vertical .footer {
    writing-mode: vertical-rl;
  }
}

.only-vertical,
.only-horizontal,
.only-vertical-column {
  display: none;
}

.horizontal .only-horizontal {
  display: revert;
}

@media (width < 640px), (height < 600px) {
  .vertical .only-vertical {
    display: revert;
  }
}

@media (640px <= width) and (600px <= height) {
  .vertical .only-vertical-column {
    display: revert;
  }
}

.horizontal .not-in-horizontal {
  display: none;
}

@media (width < 640px), (height < 600px) {
  .vertical .not-in-vertical {
    display: none;
  }
}

@media (640px <= width) and (600px <= height) {
  .vertical .not-in-vertical-column {
    display: none;
  }
}

.not-in-vertical,
.not-in-horizontal,
.not-in-vertical-column {
  display: revert;
}

.tcu-digits {
  .vertical & {
    text-combine-upright: all;
  }
}

dialog::backdrop {
  background-color: rgba(0, 0, 0, 0.75);
}

.line-clamp{
  --lines: 2;
  --lh: 1lh;
  overflow: hidden;

  /* „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂãï‰Ωú */
  line-height: var(--lh);
  max-block-size: calc(var(--lh) * var(--lines));
  position: relative;
}

@supports (line-clamp: 2){
  .line-clamp{
    line-clamp: var(--lines);

    line-height: normal;
    max-block-size: none;
    position: static;
  }
  .line-clamp::after{ content: unset; }
}

